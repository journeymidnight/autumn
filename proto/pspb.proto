 /*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless  by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package pspb;

//import "gogoproto/gogo.proto";

/*

PART/{PartID} => {id, id <startKey, endKEY>} //immutable

PARTSTATS/{PartID}/tables => [(extentID,offset),...,(extentID,offset)]
PARTSTATS/{PartID}/blobStreams => [id,...,id]
PARTSTATS/{PartID}/discard => <DATA>


PSSERVER/{PSID} => {PSDETAIL}

修改为Partition到PS的映射
regions/config => {
	{part1,: ps3, region}, {part4: ps5, region}
}

*/


//<startKey, endKey, PartID, PSID, address>

message RegionInfo {
	Range rg = 1;
	uint64 PartID = 2;
	uint64 PSID = 3;
}

message Regions {
	map<uint64, RegionInfo> regions = 1;
}

message Range {
	bytes startKey = 1;
	bytes endKey = 2;
}

message Location {
	uint64 extentID = 1;
	uint32 offset = 2;
}

message TableLocations {
	repeated Location locs = 1;
}


message PartitionMeta {
	uint64 logStream = 2;
	uint64 rowStream = 3;
	Range  rg = 7;
	uint64 PartID = 8;
	uint64 metaStream = 9;
}

 message PSDetail {
	uint64 PSID = 1;
	string address = 2;
}

message BlockMeta {
	TableIndex tableIndex = 1;
    uint32  CompressedSize = 2;
    uint32  UnCompressedSize  = 3; 
    uint64  vpExtentID = 4;
    uint32  vpOffset = 5;
    uint64  seqNum = 6;
	map<uint64, int64> discards = 7; //extentID=>size
	uint32  CompressionType = 8; //0:none, 1:snappy
}

message BlockOffset {
  bytes key = 1;
  uint64 extentID = 2;
  uint32 offset = 3;
}

message TableIndex {
  repeated BlockOffset offsets = 1;//相当于二级索引, 每个block定长64KB
  bytes bloomFilter = 2;
  uint64 estimatedSize = 3;  //estimatedSize in memstore
  uint32 numOfBlocks = 4;
}



message PutRequest {
	bytes key = 1;
	bytes value = 2;
	uint64 ExpiresAt = 3; //TTL
	uint64 partid = 4;
}

message PutResponse {
	bytes key = 1;
}


message DeleteRequest {
	bytes key = 1;
	uint64 partid = 2;

}

message DeleteResponse {
	bytes key = 1;
}

message GetRequest {
	bytes key = 1;
	uint64 partid = 2;
}

message GetResponse {
	bytes key = 1;
	bytes value = 2;
}

message RequestOp {
	oneof request {
		PutRequest request_put = 1;
		DeleteRequest request_delete = 2;
		GetRequest   request_get = 3;
	}
}

message ResponseOp {
	oneof response {
		PutResponse response_put = 1;
		DeleteResponse response_delete= 2;
		GetResponse   response_get = 3;
	}
}

message BatchRequest {
	repeated RequestOp req = 1;
}

message BatchResponse {
	repeated RequestOp res  = 1;
}

//return message KeyValue?
message RangeRequest{
	bytes prefix = 1;
	bytes start = 2;
	uint32 limit = 3;
	uint64 partid = 4;
}

message RangeResponse {
	bool truncated = 1;
	repeated bytes keys = 2;
}


message SplitPartRequest {
	uint64 partid = 1;
}

message SplitPartResponse {
}

message CompactOp {}
message AutoGCOp {}
message ForceGCOp {
	repeated uint64 exIDs = 1;
}
message MaintenanceRequest {
	uint64 partid = 1;
	oneof OP {
		CompactOp compact = 2;
		AutoGCOp  autogc = 3;
		ForceGCOp forcegc = 4;
	}
}

message MaintenanceResponse {
}

message HeadRequest {
	bytes key = 1;
	uint64 partid = 2;
}

message HeadResponse {
	HeadInfo info = 1;
}

message HeadInfo {
	bytes key = 1;
	uint32 len = 3;
}
message StreamPutRequestHeader {
	bytes key = 1;
	uint32 lenOfValue = 2;
	uint64 ExpiresAt = 3;
	uint64 partid = 4;
}

message StreamPutRequest {
	oneof data {
		StreamPutRequestHeader header = 1;
		bytes payload = 2;
	}
}


service PartitionKV {
	rpc Batch(BatchRequest) returns (BatchResponse) {}
	rpc Put(PutRequest) returns (PutResponse) {}
	rpc Head(HeadRequest) returns (HeadResponse) {}
	rpc Get (GetRequest) returns (GetResponse) {}
	rpc Delete(DeleteRequest) returns (DeleteResponse) {}
	rpc Range(RangeRequest) returns (RangeResponse) {}
	rpc StreamPut(stream StreamPutRequest) returns (PutResponse) {}
	//TODO
	//rpc StreamGet: non-EC can be done by stream

	
	//ps management API
	//system performace
	rpc SplitPart(SplitPartRequest) returns (SplitPartResponse) {}
	rpc Maintenance(MaintenanceRequest) returns (MaintenanceResponse) {}
}
