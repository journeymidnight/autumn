 /*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless  by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package pspb;

import "pb.proto";


message MixedLog {
	repeated uint32 offsets = 1;
}


/*
PART_%d/range => [startKey, endKey]
PART_%d/blobStreams => [id,...,id]
PART_%d/logStream => id
PART_%d/rowStream => id
PART_%d/tables => [(extentID,offset),...,(extentID,offset)]
*/

message Range {
	bytes startKey = 1;
	bytes endKey = 2;
}

message Location {
	uint64 extentID = 1;
	uint32 offset = 2;
}

message BlobStreams {
	repeated uint64 blob = 1;
}


message TableLocations {
	repeated Location locs = 1;
}


message PartitionMeta {
	BlobStreams blobs = 1;
	uint64 logStream = 2;
	uint64 rowStream = 3;
	TableLocations locs = 4;
	uint64 parent = 5;
	bytes  discard = 6;
	Range  rg = 7;
	uint64 PartID = 8;
}

 message PSDetail {
	uint64 PSID = 1;
	string address = 2;
}

//<startKey, endKey, PartID, PSID, address>

message RegionInfo {
	Range rg = 1;
	uint64 PartID = 2;
	uint64 PSID = 3;
	string addr = 4;
}

//BlockMeta will be marshaled into pb.Block.userdata
message BlockMeta {
	TableIndex tableIndex = 1;
    uint32  CompressedSize = 2;
    uint32  UnCompressedSize  = 3;
    uint64  vpExtentID = 4;
    uint32  vpOffset = 5;
    uint64  seqNum = 6;
}

message BlockOffset {
  bytes key = 1;
  uint64 extentID = 2;
  uint32 offset = 3;
}

message TableIndex {
  repeated BlockOffset offsets = 1;//相当于二级索引, 每个block定长64KB
  bytes bloomFilter = 2;
  uint64 estimatedSize = 3;
  uint32 numOfBlocks = 4;
}


message GetPartitionMetaRequest {
	uint64 PSID = 1;
}
message GetPartitionMetaResponse {
	pb.Code code = 1;
	repeated PartitionMeta meta = 2;
}


message SetRowStreamTablesRequest {
	uint64 partitionID = 1;
	TableLocations locs = 2;
}

message SetRowStreamTablesResponse {
	pb.Code code = 1;
}

message GetRegionsRequest {

}
message GetRegionsResponse {
	pb.Code code = 1;
	repeated RegionInfo regions = 2;
}


message RegisterPSRequest {
	string addr = 1;
}

message RegisterPSResponse {
	pb.Code code = 1;
	uint64 id = 2;
}


message GetPSInfoRequest {

}

message GetPSInfoResponse {
	repeated PSDetail servers = 1;
}

message BootstrapRequest {
	uint64 logID = 1;
	uint64 rowID = 2;
	uint64 parent = 3; //PSID
}

message BootstrapResponse {
	uint64 partID = 1;
}

service PartitionManagerService {
	rpc SetRowStreamTables(SetRowStreamTablesRequest) returns (SetRowStreamTablesResponse) {}
	rpc RegisterPS(RegisterPSRequest) returns (RegisterPSResponse) {}
	rpc GetRegions(GetRegionsRequest) returns (GetRegionsResponse) {}
	rpc GetPartitionMeta(GetPartitionMetaRequest) returns (GetPartitionMetaResponse) {}
	rpc GetPSInfo(GetPSInfoRequest) returns (GetPSInfoResponse) {}
	rpc Bootstrap(BootstrapRequest) returns (BootstrapResponse) {}
}



/*
message Entry {
	bytes  key = 1;
	bytes  value = 2;
	uint32 meta = 3; //ignore meta 
	uint32 UserMeta = 4;
	uint64 ExpiresAt = 5;
}

func (rp *RangePartition) writeAsync(key, value []byte, f func(error)) {

*/

message PutRequest {
	bytes key = 1;
	bytes value = 2;
	uint64 ExpiresAt = 3; //TTL
	uint64 psversion = 4;
	uint64 partid = 5;
}

message PutResponse {
	bytes key = 1;
}


message DeleteRequest {
	bytes key = 1;
	uint64 psversion = 2;
	uint64 partid = 5;

}

message DeleteResponse {
	bytes key = 1;
	uint64 psversion = 2;
}

message GetRequest {
	bytes key = 1;
	uint64 psversion = 2;
	uint64 partid = 5;
}

message GetResponse {
	bytes key = 1;
	bytes value = 2;
}

message RequestOp {
	oneof request {
		PutRequest request_put = 1;
		DeleteRequest request_delete = 2;
		GetRequest   request_get = 3;
	}
}

message ResponseOp {
	oneof response {
		PutResponse response_put = 1;
		DeleteResponse response_delete= 2;
		GetResponse   response_get = 3;
	}
}

message BatchRequest {
	repeated RequestOp req = 1;
}

message BatchResponse {
	repeated RequestOp res  = 1;
}

//return message KeyValue?
message RangeRequest{
	bytes prefix = 1;
	bytes start = 2;
	uint32 limit = 3;
	uint64 partid = 4;
	uint64 psversion = 5;
}

message RangeResponse {
	uint32 truncated = 1;
	repeated bytes keys = 2;
}

service PartitionKV {
	/*
	option (google.api.http) = {
        post: "/v3/kv/txn"
        body: "*"
    };
	*/
	rpc Batch(BatchRequest) returns (BatchResponse) {}
	rpc Put(PutRequest) returns (PutResponse) {}
	rpc Get (GetRequest) returns (GetResponse) {}
	rpc Delete(DeleteRequest) returns (DeleteResponse) {}
	rpc Range(RangeRequest) returns (RangeResponse) {}
}