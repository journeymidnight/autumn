 /*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless  by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
package pb;

//import "gogoproto/gogo.proto";



message Entry {
	bytes  key = 1;
	bytes  value = 2;
	uint32 meta = 3;
	uint64 ExpiresAt = 4;
}

message EntryInfo {
	Entry log = 1;
	//used when read bigger blocks log.value = nil, log.meta & bitValuePointer > 0 
	uint64 extentID = 2;
	uint32 offset = 3;
	uint64 estimatedSize = 4;
	uint32 end = 5;
}

enum Code {
	OK = 0;
	ERROR = 1;
	EndOfExtent = 2;
	EVersionLow = 4;
	NotLEADER = 5;
	LockedByOther = 6;
	ClientStreamVersionTooHigh = 7;
	NotFound = 8;
}



message Block {
	bytes data = 1;
}

message AppendRequest {
	uint64 extentID = 1;
	repeated Block blocks = 2;
	uint64 eversion = 3;
	int64  revision = 4;
	bool mustSync = 5;
}

message AppendResponse {
	Code code = 1;
	string codeDes = 2;
	repeated uint32 offsets = 3;
	uint32 end = 4;
}

message CreateExtentRequest {
	uint64 streamID = 1;
}

message CreateExtentResponse{
	Code code = 1;
	string codeDes = 2;
	uint64 extentID = 3;
}

message ReadBlocksRequest {
	uint64 extentID = 1;
	uint32 offset = 2;
	uint32 numOfBlocks = 3;
	uint64 eversion = 4;
}

message ReadBlocksResponse {
	Code code = 1;
	string codeDes = 2;
	repeated Block blocks = 3;
	uint32 end = 4;
	repeated uint32 offsets = 5;
}


message Payload {
    bytes Data = 1;
}


message CommitLengthRequest {
	uint64 extentID = 1;
	int64 revision = 2; //tell node to update lock's revistion to prevent other node from append
}

message CommitLengthResponse {
	Code code = 1;
	string codeDes = 2;
	uint32 length = 3;
}

/*
message SealRequest {
	uint64 extentID = 1;
	uint32 commitLength = 2;
	int64 revision = 3;
}

message SealResponse {
	Code code = 1;
	string codeDes = 2;
}
*/

message ReadEntriesRequest {
	uint64 extentID = 1;
	uint32 offset = 2;
	uint32 replay = 3;
	uint64 eversion = 4;
}


message ReadEntriesResponse{
	Code code = 1;
	string codeDes = 2;
	repeated EntryInfo entries = 3;
	uint32 end = 4;
}


message DF {
	uint64 total = 1;
	uint64 free = 2;
	bool online = 3;
}


message DfRequest{
	repeated RecoveryTask tasks = 1;
	repeated uint64 diskIDs = 2;
}

//DfResponse does't need to Code/CodeDes
message DfResponse{
	repeated RecoveryTask doneTask = 4;
	map<uint64, DF> diskStatus = 5;
}

message RecoveryTask {
	uint64  extentID = 1;
	uint64  replaceID = 2;
	uint64  nodeID = 3;
	int64  startTime = 4;
	uint64 readyDiskID = 5;
}

message RequireRecoveryRequest {
	RecoveryTask task = 1;
}

message RequireRecoveryResponse {
	Code code = 1;
	string codeDes = 2;
}

//maybe
message CopyResponseHeader {
	Code code = 1;
	string codeDes = 2;
	uint64 payloadLen = 3;
}

message CopyExtentRequest {
	uint64 extentID = 1;
	uint64 offset = 2;
	uint64 size = 3;
	uint64 eversion = 4;
}

message CopyExtentResponse {
	oneof data {
		CopyResponseHeader header = 1;
		bytes payload = 2;
	}
}

message ReAvaliRequest {
	uint64 extentID  = 1;
	uint64 eversion  = 2;
}

message ReAvaliResponse {
	Code code = 1;
	string codeDes = 2;
}


service ExtentService {
	//from stream client
	rpc Append(AppendRequest) returns (AppendResponse){}
	rpc ReadEntries(ReadEntriesRequest) returns (ReadEntriesResponse){}
	rpc SmartReadBlocks(ReadBlocksRequest) returns (ReadBlocksResponse){}

	//internal rpc
	rpc ReAvali(ReAvaliRequest) returns (ReAvaliResponse){}
	rpc CopyExtent(CopyExtentRequest) returns (stream CopyExtentResponse){}
	rpc Df(DfRequest) returns (DfResponse){}
	rpc RequireRecovery(RequireRecoveryRequest) returns (RequireRecoveryResponse) {}

	rpc CommitLength(CommitLengthRequest) returns (CommitLengthResponse) {}
	rpc Heartbeat (Payload)  returns (stream Payload) {}
	rpc ReplicateBlocks(ReplicateBlocksRequest) returns (ReplicateBlocksResponse) {}
	rpc ReadBlocks(ReadBlocksRequest) returns(ReadBlocksResponse){}
	rpc AllocExtent(AllocExtentRequest) returns (AllocExtentResponse){}
}

message ReplicateBlocksRequest {
	uint64 extentID = 1;
	uint32 commit = 2;
	repeated Block blocks = 3;
	int64 revision = 4;
	bool mustSync = 5;

}

message ReplicateBlocksResponse {
	Code code = 1;
	string codeDes = 2;
	repeated uint32 offsets = 3;
	uint32 end = 4;
}

message AllocExtentRequest {
	uint64 extentID = 1;	
}

message AllocExtentResponse {
	Code code = 1;
	string codeDes = 2;
	uint64 diskID = 3;
}


message CheckCommitLengthRequest {
	uint64 streamID = 1;
	string ownerKey = 2;
	int64 revision = 3;//ownerKey, revision is used for locking
}

message CheckCommitLengthResponse {
	Code code = 1;
	string codeDes = 2;
	StreamInfo streamInfo = 3;
	uint32 end = 4;
	ExtentInfo lastExInfo = 5; //主要是发送lastExInfo.eversion, 客户端waitforversion
}

message StreamAllocExtentRequest {
	uint64 streamID = 1;
	string ownerKey = 2; //ownerKey, revision is used for locking
	int64 revision = 3;
	uint32 end = 4;
	int64 sversion = 5;
}

message StreamAllocExtentResponse {
	Code code = 1;
	string codeDes = 2;
	StreamInfo streamInfo = 3;
	ExtentInfo lastExInfo = 4;//主要是发送lastExInfo.eversion, 客户端waitforversion
}

/*
message StreamAllocExtentRequest{
	uint64 streamID = 1;
	uint64 extentToSeal = 2;
	string ownerKey = 5; //ownerKey, revision is used for locking
	int64  revision = 6;
	uint32 checkCommitLength = 7; //if checkCommitLength > 0, do not use end.
	                              //if checkCommitLength ==0, end is the sealedlength, and all nodes are avaliable
	uint32 end = 8;
	int64 sversion = 9; //当前stream的version,用来去重. client的sversion只会小于等于sm的sversion, 否则返回ClientStreamVersionTooHigh
}


message StreamAllocExtentResponse{
	Code code = 1;
	string codeDes = 2;
	uint64 streamID = 3;
	//one of extent or return end of last extent
	ExtentInfo extent = 4;
	uint32 end = 5;

	uint64 Sversion = 6;//with ExtentInfo:FIXME: 以后和CheckCommitLength分开
}
*/


message StreamInfoRequest {
	repeated uint64 streamIDs = 1;
}


message StreamInfoResponse {
	Code code = 1;
	string codeDes = 2;
	map<uint64, StreamInfo> streams = 3;
	map<uint64, ExtentInfo> extents = 4;
}

message ExtentInfoRequest {
	uint64 extentID = 1;
}

message ExtentInfoResponse {
	Code code = 1;
	string codeDes = 2;
	ExtentInfo exInfo = 3;
}

message NodesInfoRequest{}
message NodesInfoResponse{
	Code code = 1;
	string codeDes = 2;
	map<uint64, NodeInfo> nodes = 3;
}

message RegisterNodeRequest{
	string addr = 1;
	repeated string diskUUIDs = 2;
}

message RegisterNodeResponse {
	Code code = 1;
	string codeDes = 2;
	uint64 nodeId = 3;
	map<string, uint64> diskUUIDs = 4; //uuid=>diskID
}


message CreateStreamRequest {
	uint32 dataShard = 1;
	uint32 parityShard = 2;
}

message CreateStreamResponse {
	Code code = 1;
	string codeDes = 2;
	StreamInfo stream = 3;
	ExtentInfo extent = 4; 
}

message TruncateRequest {
	uint64 streamID = 1;
	uint64 extentID = 2;
	string ownerKey = 3; //ownerKey, revision is used for locking
	int64  revision = 4;
	int64  sversion = 5;//当前stream的version,用来去重. client的sversion只会小于等于sm的sversion, 否则返回ClientStreamVersionTooHigh
	string blobKey = 6; //if blobKey == "", delete extents, else "create new stream, and add it to gabageKey"
}

message	BlobStreams {
	//list of streamID
	repeated uint64 blobs = 1;
}

message TruncateResponse {
	Code code = 1;
	string codeDes = 2;
	StreamInfo updatedStreamInfo = 3;
	StreamInfo blobStreamInfo = 4;
}


message MultiModifySplitRequest { 
	uint64 partID = 1;
	bytes midKey = 2;
	string ownerKey = 3;//ownerKey, revision is used for locking
	int64 revision = 4;
	uint32 logStreamSealedLength = 5;
	uint32 rowStreamSealedLength = 6;
}


message MultiModifySplitResponse {
	Code code = 1;
	string codeDes = 2;
}

message StatusRequest {

}

message StatusResponse {
	Code code = 1;
	string codeDes = 2;
}

service StreamManagerService {
	rpc StreamInfo(StreamInfoRequest) returns (StreamInfoResponse) {}
	rpc ExtentInfo(ExtentInfoRequest) returns (ExtentInfoResponse) {}
	rpc NodesInfo(NodesInfoRequest) returns (NodesInfoResponse) {}
	rpc Status(StatusRequest) returns (StatusResponse) {}

	//verify extent should exist on this node...
	//rpc verifyExtent

	rpc CheckCommitLength(CheckCommitLengthRequest) returns (CheckCommitLengthResponse) {}
	rpc StreamAllocExtent(StreamAllocExtentRequest) returns  (StreamAllocExtentResponse) {}
	
	rpc CreateStream(CreateStreamRequest) returns  (CreateStreamResponse) {}
	rpc RegisterNode(RegisterNodeRequest) returns (RegisterNodeResponse) {}
	rpc Truncate(TruncateRequest) returns (TruncateResponse) {}


	rpc MultiModifySplit(MultiModifySplitRequest) returns (MultiModifySplitResponse){}
}

//used in Etcd Campaign
message MemberValue {
    uint64 ID = 1;
    string Name = 2;
    string GrpcURL =3;
}


message ExtentInfo {
    uint64 extentID = 1;
    repeated uint64 replicates = 2; //dataShard nodes
 	repeated uint64 parity = 3;//partiyShard nodes
	uint64 eversion = 4; //eversion should equal to ETCD's version
	uint64 refs = 5; 
	uint64 SealedLength = 6;
	uint32 avali = 7; //bitmap to indicat if node is avaliable when sealing
	repeated uint64 replicateDisks = 8;
	repeated uint64 parityDisk = 9;
}
/*
Extent和Stream是多对多的关系, 一个stream对应多个extent.
如果出现splitstream的情况(删除B, 生成C,D), 一个extent可能对应2个不同的stream
如果出现mergestream的情况(删除C,D, 生成B), 仍然一个extent对应一个stream
删除stream的情况, extent有可能可以删除, 也有可能要保留

streamAllocExtent和MultiModify, deleteStream必须修改stream每一个对应extentInfo
sm_service什么时候删除extentInfo[ref==0]? 任何时候都可以
*/

message StreamInfo {
	uint64 streamID = 1;
	repeated uint64 extentIDs = 2;
	uint64 sversion = 3;
}

message NodeInfo {
	uint64 nodeID = 1;
	string address = 2;
	repeated uint64 disks = 3; 
}

message DiskInfo {
	uint64 diskID = 1;
	bool online = 2;
	string uuid = 3;
}